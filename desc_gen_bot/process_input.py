from telegram import Update
from telegram.ext import ContextTypes
from user_steps import UserSteps
import base64
from clients import two_gis_client, openai_client
import os
import time

step_to_reply_msg = {
    0: "–°–ø–∞—Å–∏–±–æ –∑–∞ –∞–¥—Ä–µ—Å. –î–∞–ª–µ–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–≤–∞—Ä—Ç–∏—Ä—ã.",
    1: "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –º–Ω–µ –Ω—É–∂–Ω–æ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–µ–π. –ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–∞–∑–∏—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–∞–∂, –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞, —Ä–µ–º–æ–Ω—Ç, –≤–∏–¥ –∏–∑ –æ–∫–Ω–∞).",
    2: "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–∞–Ω–Ω—ã–µ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ. –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - –Ω–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏, —Ç–∏–ø –¥–æ–º–∞, –Ω–∞–ª–∏—á–∏–µ —É–¥–æ–±—Å—Ç–≤ –≤ –≤–∏–¥–µ –∫–æ–Ω—Å—å–µ—Ä–∂–∞ –∏ —Ç.–ø.).",
    3: "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–º–µ. –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ. –ü–æ—Å–ª–µ–¥–Ω–∏–º —à–∞–≥–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ —Ç–∏–ø —Å–¥–µ–ª–∫–∏, —é—Ä —á–∏—Å—Ç–æ—Ç–∞, —Å–∫–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤).",
    4: "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–ø.–¥–µ—Ç–∞–ª–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ..."
}

user_steps = UserSteps()

OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
TWOGIS_API_KEY = os.environ.get("TWOGIS_API_KEY")

async def process_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message is None:
        return

    if update.message.chat.type == 'private':
        channel_info = ""
        user_message = ""
        if context.args is not None:
            channel_info = ' '.join(context.args)
            if channel_info == "":
                await update.message.reply_text("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø—Ä–∏—à–ª–∏—Ç–µ —á—Ç–æ-—Ç–æ:)")
                return
        else:
            user_message = update.message.text

        user_id = update.effective_user.id

        current_user_step = user_steps.get_current_user_step(user_id)


        if current_user_step <= 4:
            reply_msg = step_to_reply_msg[current_user_step]
            if current_user_step == 0:
                await update.message.reply_text("–ò—â—É —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã, —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã, —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –∏ –¥—Ä—É–≥–∏–µ –æ–±—å–µ–∫—Ç—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏...")
                client = two_gis_client.TwoGisClient(api_key=TWOGIS_API_KEY)
                infra_summary = client.get_infrastructure_summary(user_message)
                user_steps.update_user_data(user_id, address = user_message)
                user_steps.update_user_data(user_id, infra_summary = infra_summary)
            if current_user_step == 1:
                if len(update.message.photo) < 1:
                    print("not a photo")
                    return
                photo_file = await update.message.photo[-1].get_file()
                image_bytes = await photo_file.download_as_bytearray()
                base64_image = base64.b64encode(image_bytes).decode("utf-8")
                user_steps.update_user_data(user_id, image = base64_image)
            if current_user_step == 2:
                user_steps.update_user_data(user_id, flat_description = user_message)
            if current_user_step == 3:
                user_steps.update_user_data(user_id, options = user_message)
            if current_user_step == 4:
                user_steps.update_user_data(user_id, deal_details = user_message)

        if current_user_step == 4:
            reply_msg = "–°–ø–∞—Å–∏–±–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ... ü§ì"
            await update.message.reply_text(reply_msg)

            current_user_steps = user_steps.get_current_user_data(user_id)
            ai_client = openai_client.OpenAIClient(api_key=OPENAI_API_KEY)
            user_promt = f"–ê–¥—Ä–µ—Å: {current_user_steps._address}\n–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {current_user_steps._flat_description}\n–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–∞: {current_user_steps._options}\n–£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏: {current_user_steps._deal_details}"

            description = ai_client.create_description(
                user_prompt=user_promt,
                address=current_user_steps._address,
                infrastructure_summary=current_user_steps._infra_summary,
                image_paths=current_user_steps._image
            )
            #resp = mistral.req_final_description(user_id, current_user_steps)

            reply_msg = description


        current_user_data = user_steps.get_current_user_data(user_id)
        await update.message.reply_text(reply_msg)

        if current_user_step == 4:
            time.sleep(3)
            await update.message.reply_text("–ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ - –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—å–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.")

        user_steps.increment_user_step(user_id)

   
        
